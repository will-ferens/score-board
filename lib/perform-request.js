"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _requestPromise = _interopRequireDefault(require("./request-promise"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = function _default(url, apiService) {
  var options = {
    headers: {
      Accept: 'application/json'
    },
    url: url
  };
  options.headers[apiService.keyHeader] = apiService.key;
  return (0, _requestPromise.default)(options).then(function (result) {
    return new Promise(function (resolve, reject) {
      if (result.response.statusCode !== 200) {
        reject(new Error("HTTP Status ".concat(result.response.statusCode, " - ").concat(options.url)));
        return;
      }

      try {
        resolve({
          body: JSON.parse(result.body),
          headers: result.response.headers,
          scrollCount: result.response.headers['x-count'] || result.response.headers['X-Count'],
          scrollUrl: result.response.headers['x-next-page'] || result.response.headers['X-Next-Page'],
          url: options.url
        });
      } catch (error) {
        reject(error);
      }
    });
  });
};

exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uL2pzL3BlcmZvcm0tcmVxdWVzdC5qcyJdLCJuYW1lcyI6WyJ1cmwiLCJhcGlTZXJ2aWNlIiwib3B0aW9ucyIsImhlYWRlcnMiLCJBY2NlcHQiLCJrZXlIZWFkZXIiLCJrZXkiLCJ0aGVuIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJyZXN1bHQiLCJyZXNwb25zZSIsInN0YXR1c0NvZGUiLCJFcnJvciIsImJvZHkiLCJKU09OIiwicGFyc2UiLCJzY3JvbGxDb3VudCIsInNjcm9sbFVybCIsImVycm9yIl0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQ0E7Ozs7ZUFVZSxrQkFBQ0EsR0FBRCxFQUFNQyxVQUFOLEVBQXFCO0FBQ2hDLE1BQU1DLFVBQVU7QUFDWkMsYUFBUztBQUNMQyxjQUFRO0FBREgsS0FERztBQUlaSjtBQUpZLEdBQWhCO0FBWUFFLFVBQVFDLE9BQVIsQ0FBZ0JGLFdBQVdJLFNBQTNCLElBQXdDSixXQUFXSyxHQUFuRDtBQUdBLFNBQU8sNkJBQVFKLE9BQVIsRUFBaUJLLElBQWpCLENBQXNCO0FBQUEsV0FBVSxJQUFJQyxPQUFKLENBQVksVUFBQ0MsT0FBRCxFQUFVQyxNQUFWLEVBQXFCO0FBQ3BFLFVBQUlDLE9BQU9DLFFBQVAsQ0FBZ0JDLFVBQWhCLEtBQStCLEdBQW5DLEVBQXdDO0FBQ3BDSCxlQUFPLElBQUlJLEtBQUosdUJBQXlCSCxPQUFPQyxRQUFQLENBQWdCQyxVQUF6QyxnQkFBeURYLFFBQVFGLEdBQWpFLEVBQVA7QUFDQTtBQUNIOztBQUVELFVBQUk7QUFNQVMsZ0JBQVE7QUFDSk0sZ0JBQU1DLEtBQUtDLEtBQUwsQ0FBV04sT0FBT0ksSUFBbEIsQ0FERjtBQUVKWixtQkFBU1EsT0FBT0MsUUFBUCxDQUFnQlQsT0FGckI7QUFHSmUsdUJBQWFQLE9BQU9DLFFBQVAsQ0FBZ0JULE9BQWhCLENBQXdCLFNBQXhCLEtBQXNDUSxPQUFPQyxRQUFQLENBQWdCVCxPQUFoQixDQUF3QixTQUF4QixDQUgvQztBQUlKZ0IscUJBQVdSLE9BQU9DLFFBQVAsQ0FBZ0JULE9BQWhCLENBQXdCLGFBQXhCLEtBQTBDUSxPQUFPQyxRQUFQLENBQWdCVCxPQUFoQixDQUF3QixhQUF4QixDQUpqRDtBQUtKSCxlQUFLRSxRQUFRRjtBQUxULFNBQVI7QUFPSCxPQWJELENBYUUsT0FBT29CLEtBQVAsRUFBYztBQUVaVixlQUFPVSxLQUFQO0FBQ0g7QUFDSixLQXZCc0MsQ0FBVjtBQUFBLEdBQXRCLENBQVA7QUF3QkgsQyIsImZpbGUiOiJwZXJmb3JtLXJlcXVlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQgbm8tcHJvY2Vzcy1lbnY6IDAgKi9cbmltcG9ydCByZXF1ZXN0IGZyb20gJy4vcmVxdWVzdC1wcm9taXNlJztcblxuLyoqXG4gKiBTZW5kcyBhIEhUVFAgcmVxdWVzdCB0byB0aGUgcHJvdmlkZWQgVVJMLlxuICogQGFyZyB7c3RyaW5nfSB1cmxcbiAqIEBhcmcge29iamVjdH0gW2FwaVNlcnZpY2VdIFRoZSBBUEkgc2VydmljZSBvYmplY3QgY29udGFpbmluZyBlbmRwb2ludCBkZXRhaWxzIGFuZCBrZXlcbiAqIEByZXR1cm5zIHtQcm9taXNlPE9iamVjdD59IFRoZSBwYXJzZWQgSFRUUCByZXNwb25zZVxuICogQGV4YW1wbGVcbiAqIHBlcmZvcm1SZXF1ZXN0KCdodHRwOi8vZXhhbXBsZS5jb20vYXBpL3YxL2V4YW1wbGVFbmRwb2ludCcsICdleGFtcGxlLWFwaS1rZXktMTIzJykudGhlbihjb25zb2xlLmxvZylcbiAqL1xuZXhwb3J0IGRlZmF1bHQgKHVybCwgYXBpU2VydmljZSkgPT4ge1xuICAgIGNvbnN0IG9wdGlvbnMgPSB7XG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICAgIEFjY2VwdDogJ2FwcGxpY2F0aW9uL2pzb24nXG4gICAgICAgIH0sXG4gICAgICAgIHVybFxuICAgIH07XG5cbiAgICAvKlxuICAgIElmIG5vIEFQSSBrZXkgaXMgcHJvdmlkZWQgdG8gdGhlIGZ1bmN0aW9uLCBsb29rIGZvciB0aGUga2V5IGluIHRoZVxuICAgIHByb2Nlc3Mgb3IgZ2xvYmFsIHNjb3BlLiBUaGUgcHJvcGVydHkgdG8gaW5zcGVjdCBpcyBzZXQgaW5cbiAgICBjb25maWd1cmF0aW9uLmpzIGFzIGBnbG9iYWxQcm9wZXJ0eWAuXG4gICAgKi9cbiAgICBvcHRpb25zLmhlYWRlcnNbYXBpU2VydmljZS5rZXlIZWFkZXJdID0gYXBpU2VydmljZS5rZXk7XG5cbiAgICAvLyBTZW5kIHRoZSByZXF1ZXN0IHRvIHRoZSBBUElcbiAgICByZXR1cm4gcmVxdWVzdChvcHRpb25zKS50aGVuKHJlc3VsdCA9PiBuZXcgUHJvbWlzZSgocmVzb2x2ZSwgcmVqZWN0KSA9PiB7XG4gICAgICAgIGlmIChyZXN1bHQucmVzcG9uc2Uuc3RhdHVzQ29kZSAhPT0gMjAwKSB7XG4gICAgICAgICAgICByZWplY3QobmV3IEVycm9yKGBIVFRQIFN0YXR1cyAke3Jlc3VsdC5yZXNwb25zZS5zdGF0dXNDb2RlfSAtICR7b3B0aW9ucy51cmx9YCkpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG5cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8qXG4gICAgICAgICAgICBBbHdheXMgd3JhcCBhbnkgbG9naWMgY29udGFpbmluZyBKU09OLnBhcnNlKCkgaW4gYVxuICAgICAgICAgICAgdHJ5LWNhdGNoIGJsb2NrIGp1c3QgaW4gY2FzZSB0aGUgc3RyaW5nIGlzIG1hbGZvcm1lZFxuICAgICAgICAgICAgYW5kIGl0IHRocm93cyBhbiBFcnJvci5cbiAgICAgICAgICAgICovXG4gICAgICAgICAgICByZXNvbHZlKHtcbiAgICAgICAgICAgICAgICBib2R5OiBKU09OLnBhcnNlKHJlc3VsdC5ib2R5KSxcbiAgICAgICAgICAgICAgICBoZWFkZXJzOiByZXN1bHQucmVzcG9uc2UuaGVhZGVycyxcbiAgICAgICAgICAgICAgICBzY3JvbGxDb3VudDogcmVzdWx0LnJlc3BvbnNlLmhlYWRlcnNbJ3gtY291bnQnXSB8fCByZXN1bHQucmVzcG9uc2UuaGVhZGVyc1snWC1Db3VudCddLFxuICAgICAgICAgICAgICAgIHNjcm9sbFVybDogcmVzdWx0LnJlc3BvbnNlLmhlYWRlcnNbJ3gtbmV4dC1wYWdlJ10gfHwgcmVzdWx0LnJlc3BvbnNlLmhlYWRlcnNbJ1gtTmV4dC1QYWdlJ10sXG4gICAgICAgICAgICAgICAgdXJsOiBvcHRpb25zLnVybFxuICAgICAgICAgICAgfSk7XG4gICAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgICAgICAvLyBKU09OLnBhcnNlKCkgZXJyb3JcbiAgICAgICAgICAgIHJlamVjdChlcnJvcik7XG4gICAgICAgIH1cbiAgICB9KSk7XG59O1xuIl19